{"ast":null,"code":"var _jsxFileName = \"/Users/omarabdul/Desktop/databases/src/components/Management.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './SignUpForm.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Management() {\n  _s();\n  const [employee, setEmployee] = useState({\n    email: '',\n    password: '',\n    hotelID: ''\n  });\n  const [rooms, setRooms] = useState([]);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setEmployee(prevState => ({\n      ...prevState,\n      [name]: value\n    }));\n  };\n  const authenticateEmployee = () => {\n    fetch('http://localhost:3001/verify-employee', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email: employee.email,\n        password: employee.password\n      })\n    }).then(response => {\n      if (!response.ok) throw new Error('Invalid credentials');\n      return response.json();\n    }).then(data => {\n      if (data.isValid) {\n        setIsAuthenticated(true);\n        setEmployee(prevState => ({\n          ...prevState,\n          hotelID: data.hotelID\n        }));\n        fetchRooms(data.hotelID);\n      } else {\n        alert('Authentication failed. Please check your credentials and try again.');\n      }\n    }).catch(error => {\n      console.error('Authentication error:', error);\n    });\n  };\n  const fetchRooms = hotelID => {\n    fetch(`http://localhost:3001/rooms-by-hotel?hotelId=${hotelID}`).then(response => response.json()).then(data => {\n      setRooms(data);\n    }).catch(error => console.error('Error fetching rooms:', error));\n  };\n  const handleRoomChange = (index, field, value) => {\n    const updatedRooms = [...rooms];\n    updatedRooms[index] = {\n      ...updatedRooms[index],\n      [field]: value\n    };\n    setRooms(updatedRooms);\n  };\n  const saveRoomDetails = room => {\n    fetch(`http://localhost:3001/update-room`, {\n      method: 'POST',\n      // Use PUT if you're updating existing records, as per REST conventions\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(room)\n    }).then(response => {\n      if (!response.ok) throw new Error('Failed to update room details');\n      alert('Room details updated successfully!');\n      // Optionally refetch rooms here to confirm update\n    }).catch(error => {\n      console.error('Error updating room details:', error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: !isAuthenticated ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"form-title\",\n        children: \"Employee Sign In\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: e => {\n          e.preventDefault();\n          authenticateEmployee();\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"email\",\n          value: employee.email,\n          onChange: handleChange,\n          placeholder: \"Email\",\n          className: \"form-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          name: \"password\",\n          value: employee.password,\n          onChange: handleChange,\n          placeholder: \"Password\",\n          className: \"form-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-container\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"form-button\",\n            children: \"Sign In\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Rooms in Your Hotel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this), rooms.length > 0 ? rooms.map((room, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"room-edit-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Room ID: \", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: room.Room_ID,\n            readOnly: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Price: \", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            value: room.Price,\n            onChange: e => handleRoomChange(index, 'Price', e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 27\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Capacity: \", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            value: room.Capacity,\n            onChange: e => handleRoomChange(index, 'Capacity', e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 30\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => saveRoomDetails(room),\n          children: \"Save Changes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 17\n        }, this)]\n      }, room.Room_ID, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 15\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No rooms found.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n_s(Management, \"IqL+KaM1vrf6MJhgmEshIup1qlM=\");\n_c = Management;\nexport default Management;\nvar _c;\n$RefreshReg$(_c, \"Management\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Management","_s","employee","setEmployee","email","password","hotelID","rooms","setRooms","isAuthenticated","setIsAuthenticated","handleChange","e","name","value","target","prevState","authenticateEmployee","fetch","method","headers","body","JSON","stringify","then","response","ok","Error","json","data","isValid","fetchRooms","alert","catch","error","console","handleRoomChange","index","field","updatedRooms","saveRoomDetails","room","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","preventDefault","onChange","placeholder","type","length","map","Room_ID","readOnly","Price","Capacity","onClick","_c","$RefreshReg$"],"sources":["/Users/omarabdul/Desktop/databases/src/components/Management.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './SignUpForm.css';\n\nfunction Management() {\n  const [employee, setEmployee] = useState({ email: '', password: '', hotelID: '' });\n  const [rooms, setRooms] = useState([]);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setEmployee(prevState => ({\n      ...prevState,\n      [name]: value,\n    }));\n  };\n\n  const authenticateEmployee = () => {\n    fetch('http://localhost:3001/verify-employee', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        email: employee.email,\n        password: employee.password\n      }),\n    })\n    .then(response => {\n      if (!response.ok) throw new Error('Invalid credentials');\n      return response.json();\n    })\n    .then(data => {\n      if (data.isValid) {\n        setIsAuthenticated(true);\n        setEmployee(prevState => ({\n          ...prevState,\n          hotelID: data.hotelID\n        }));\n        fetchRooms(data.hotelID);\n      } else {\n        alert('Authentication failed. Please check your credentials and try again.');\n      }\n    })\n    .catch(error => {\n      console.error('Authentication error:', error);\n    });\n  };\n\n  const fetchRooms = (hotelID) => {\n    fetch(`http://localhost:3001/rooms-by-hotel?hotelId=${hotelID}`)\n    .then(response => response.json())\n    .then(data => {\n      setRooms(data);\n    })\n    .catch(error => console.error('Error fetching rooms:', error));\n  };\n\n  const handleRoomChange = (index, field, value) => {\n    const updatedRooms = [...rooms];\n    updatedRooms[index] = { ...updatedRooms[index], [field]: value };\n    setRooms(updatedRooms);\n  };\n\n  const saveRoomDetails = (room) => {\n    fetch(`http://localhost:3001/update-room`, {\n      method: 'POST', // Use PUT if you're updating existing records, as per REST conventions\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(room),\n    })\n    .then(response => {\n      if (!response.ok) throw new Error('Failed to update room details');\n      alert('Room details updated successfully!');\n      // Optionally refetch rooms here to confirm update\n    })\n    .catch(error => {\n      console.error('Error updating room details:', error);\n    });\n  };\n\n  return (\n    <div className=\"container\">\n      {!isAuthenticated ? (\n        <>\n          <h2 className=\"form-title\">Employee Sign In</h2>\n          <form onSubmit={e => {\n            e.preventDefault();\n            authenticateEmployee();\n          }}>\n            <input\n              name=\"email\"\n              value={employee.email}\n              onChange={handleChange}\n              placeholder=\"Email\"\n              className=\"form-input\"\n            />\n            <input\n              type=\"password\"\n              name=\"password\"\n              value={employee.password}\n              onChange={handleChange}\n              placeholder=\"Password\"\n              className=\"form-input\"\n            />\n            <div className=\"button-container\">\n              <button type=\"submit\" className=\"form-button\">Sign In</button>\n            </div>\n          </form>\n        </>\n      ) : (\n        <div>\n          <h2>Rooms in Your Hotel</h2>\n          {rooms.length > 0 ? (\n            rooms.map((room, index) => (\n              <div key={room.Room_ID} className=\"room-edit-container\">\n                <p>Room ID: <input type=\"text\" value={room.Room_ID} readOnly /></p>\n                {/* Add other editable fields as needed */}\n                <p>Price: <input type=\"number\" value={room.Price} onChange={(e) => handleRoomChange(index, 'Price', e.target.value)} /></p>\n                <p>Capacity: <input type=\"number\" value={room.Capacity} onChange={(e) => handleRoomChange(index, 'Capacity', e.target.value)} /></p>\n                {/* Ensure you add inputs for other attributes you wish to be editable */}\n                <button onClick={() => saveRoomDetails(room)}>Save Changes</button>\n              </div>\n            ))\n          ) : (\n            <p>No rooms found.</p>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Management;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}